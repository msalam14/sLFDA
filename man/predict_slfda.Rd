% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SkewedFDA.R
\name{predict_slfda}
\alias{predict_slfda}
\title{Predicts trajectory by the sLFDA method}
\usage{
predict_slfda(
  fitOBJ,
  PSid = NULL,
  PredGS = NULL,
  PredGT = NULL,
  nfunDATA = NULL,
  nfunARG = NULL,
  nobsTIME = NULL,
  identical.ARG = TRUE,
  CovDep = FALSE,
  DesignMat = NULL,
  NewDesignMat = NULL,
  PredDesignMat = NULL
)
}
\arguments{
\item{fitOBJ}{fitted object obtained through slfda function}

\item{PSid}{is a numeric vector of subject IDs for which prediction will be made; needed for in-sample prediction only}

\item{PredGS}{is a grid in S where prediction will be made prediction}

\item{PredGT}{is a list of times points where prediction will be made; for in-sample prediction the length should be the length of PSid, however,
for out-of-sample prediction the length must be equal to the length of the list nfunDATA}

\item{nfunDATA}{a list containing funcational data for out-of-sample subjects}

\item{nfunARG}{is a numeric vector contain values where nfunDATA is sampled}

\item{nobsTIME}{is a list of numeric vectors contains observation time points for subjects in the nfunDATA}

\item{identical.ARG}{is a logical scalar indicates whether functional data for out-of-sample subjects are have sample at identical sampled points as the functional data used in model fitting}

\item{CovDep}{is a logical scalar indicates fitOBJ obtained with covariates dependency or not}

\item{DesignMat}{is a design matrix for the subjects used in the fitOBJ}

\item{NewDesignMat}{is a design matrices for different subjects that corresponds to the observed time points}

\item{PredDesignMat}{is a list of design matrices for different subjects that correspond to the prediction time points}
}
\value{
a list with predicted data; elements correspond to subjects
}
\description{
Performs prediction using the fitted slfda object for subjects no matter whether used in the model fitting or not. However, prediction can be made one type of subjects at a time.
}
\examples{
# This an example of skewed longitudinal functional data where marginal
# is a skew-normal distribution
# Required function for Fourier basis and skew-normal distribution
library(fda)
library(sn)
library(mgcv)
# Population level functions
# Mean function
meanPF<-function(s,t){
  2.5+(3.15*s)+(4*t)+(2*s*t)
}

# Scale Function
sFUN<-function(s,t){
  require(mvtnorm)
  25*dmvnorm(c(s,t),mean = c(0,0),sigma=matrix(c(2.5,0.75,0.75,3.5),2,2))
}

# Shape Function

alFUN<-function(s){
  2e1*(exp(2*s)/(1+exp(2*s)))*sin(6*pi*s/4)
}

# Sbasis functions for $L^2[S]$
SFbasis<-list("sfourier1"=function(s){
  fourier(x=s,nbasis=5,period = 1)[,2]
},"sfourier2"=function(s){
  fourier(x=s,nbasis=5,period = 1)[,3]
},"sfourier3"=function(s){
  fourier(x=s,nbasis=5,period = 1)[,4]
})

# Basis functions for time-dependent coefficients

TBasis<-list(list("tb11" = function(T){fourier(x=T,nbasis=3,period=1)[,2]},
                  "tb12" = function(T){fourier(x=T,nbasis=3,period=1)[,3]}),
             list("tb21" = function(T){fourier(x=T,nbasis=5,period=1)[,4]},
                  "tb22" = function(T){fourier(x=T,nbasis=5,period=1)[,5]}),
             list("tb31" = function(T){fourier(x=T,nbasis=7,period=1)[,6]},
                  "tb32" = function(T){fourier(x=T,nbasis=7,period=1)[,7]})
)


# A set of regular grid in functional domain S
n_s<-51
ss<-seq(0,1,length.out = n_s)

# Eigen values for time-dependent coefficient $eta_{kl}$
tdcfV<-list(c(0.6,0.4),c(0.5,0.3),c(0.25,0.20))


# Variance parameters
sig2_S<-c(0.328,0.210,0.046)
sig2_E<-0.183


# Testing 
ntp<-20
tp<-matrix(seq(0,1,length.out = ntp+2)[-c(1,ntp+2)],ncol=1)

# Full process time grid
Tg<-seq(0,1,length.out=51)

## number of subjects
n<-25

# Selection of mi
mi<-sapply(1:n,sample,x=6:12,size = 1)

# Observed Time points
Tij<-lapply(seq_len(length(mi)), function(w){sort(sample(Tg,mi[w]))})

# Simulation of Skewed FD
gdata<-SNFData(argS = ss,TimePoint = Tij,Sbasis = SFbasis,Tbasis = TBasis,
               Eta = tdcfV,Sigma2K = sig2_S,Sigma2 = sig2_E,
               muF = meanPF,sclF = sFUN,alpF = alFUN)

#' Epanechnikov Kernel function
#' 
#' @param x point at which kernel will be evaluated
#' @export
depan<-function(x){
  ifelse(abs(x)<=1,(3/4)*(1-x^2),0)
}

# Fitting slfda model

slfda<-skewedFDA(funDATA=gdata$Y,funARG=ss,obsTIME=Tij,ETGrid=tp,DOP=1,KernelF=depan,CV=TRUE,Hgrid=seq(0.02,0.2,0.02),CVThresh = 0.05,PenaltyF=Qpenalty,plfGT=Tg,
                 ES2knots=c(15,10),ES2bs=c("ps","ps"),ES2m=c(2,2),ES2Esp="REML",
                 LPknots=c(25,25),LPbs=c("ps","ps"),LPm=c(2,2),
                 Cov2nbasis=c(20,20),PVE=c(0.95,0.90),
                 Prediction=FALSE,PSid=NULL,PredGS=NULL,PredGT=NULL,
                 CovDep=FALSE,DesignMat=NULL,CovDepStr=NULL,PredDesignMat=NULL)


# Prediction using fitted slfda

pred_slfda<-predict_slfda(fitOBJ=slfda,PSid=c(6,10,23),PredGS=NULL,PredGT=list(c(0.60,0.80),c(0.82,0.90),c(0.88,0.95)),outSAMPLE=FALSE,
                          nfunDATA=NULL,nfunARG=NULL,nobsTIME=NULL,identical.ARG=TRUE,
                          CovDep=FALSE,DesignMat=NULL,NewDesignMat=NULL,PredDesignMat=NULL)
}
